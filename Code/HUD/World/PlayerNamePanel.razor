@using Sandbox;
@using Sandbox.UI;

@namespace Twinstick
@inherits PanelComponent

<root>
    <div class="name">
        <div class="name-panel" @ref="NamePanel">
            <label>P@(Player.Info.Index + 1)</label>
        </div>
    </div>
    <div class="hints">
        <div class="hint small @ShieldClasses()">
            @using ( Player.ScopeInput() )
            {
                <InputHint Size=@InputGlyphSize.Large Action="Attack2" />
            }
        </div>

        <div class="hint @BoostClasses()">
            @using ( Player.ScopeInput() )
            {
                <InputHint Size=@InputGlyphSize.Large Action="Run" />
            }
        </div>

        <div class="hint small @HintClasses()">
            @using ( Player.ScopeInput() )
            {
                <InputHint Size=@InputGlyphSize.Large Action="Attack1" />
            }
        </div>
    </div>

    <div class="bar-area">
        <div class="bar">
            <div class="bar-inner" style="width:@((HealthComponent.Health / HealthComponent.HealthRange.y) * 100f)%" />
        </div>
    </div>

</root>

@code
{
    [Property] public PlayerComponent Player { get; set; }
    public GameStateManager Manager => GameStateManager.Instance;

    public Panel NamePanel { get; set; }

    public HealthComponent HealthComponent => Player.HealthComponent;
    public ShootingComponent ShootComponent => Player.Components.Get<ShootingComponent>( FindMode.EnabledInSelfAndDescendants );
    public ShieldComponent ShieldComponent => Player.Components.Get<ShieldComponent>( FindMode.EnabledInSelfAndDescendants );

    string ShieldClasses()
    {
        if ( ShieldComponent.IsActive ) return "cooldown";
        return "";
    }

    string BoostClasses()
    {
        if (Player.IsBoosting) return "cooldown";
        return "";
    }

    string HintClasses()
    {
        var shootComponent = ShootComponent;
        if ( !shootComponent.IsValid() ) return "";
        if ( !shootComponent.CanFire() ) return "cooldown";

        return "";
    }

    protected override void OnTreeFirstBuilt()
    {
        NamePanel.BindClass( "visible", () => Manager.TimeSinceStateChanged < 2f );
        NamePanel.Style.BackgroundColor = Manager.PlayerManager.PlayerColors[Player.Info.Index].WithAlpha( 0.5f );
    }

    protected override int BuildHash()
    {
        return HashCode.Combine( Time.Now );
    }
}
