@namespace Twinstick
@inherits Panel
@attribute [StyleSheet]

<root>
    <div class="players">
        <div class="container">
            @for (int i = 0; i < ReadyUpSystem.ControllerCount; i++)
            {
                <div class="player @(ReadyUpSystem.IsReady(i) ? "ready" : "")">
                    <div class="id">
                        <div class="color" style="border: 2px solid @GetControllerColor(i)" />
                        <label style="color: @GetControllerColor(i)">P@(i + 1)</label>
                    </div>

                    <label class="text">@(ReadyUpSystem.IsReady(i) ? "ready" : "not ready")</label>
                </div>
            }
        </div>

    </div>

    <div class="hints">
        <div class="row">
            <label> Waiting for</label>
            <label>@(RequiredPlayers)</label>
            <label>more player@(RequiredPlayers == 1 ? "" : "s")</label>
        </div>

        <div class="row">
            <label>Press</label>
            <InputHint Action=@ReadyUpSystem.InputAction />
            <label>to ready up</label>
        </div>

        @if ( ReadyUpSystem.ReadyCount > 0 )
        {
            <div class="row">
                <label>Press</label>
                <InputHint Action="View" />
                <label>to force-start</label>
            </div>
        }
    </div>
</root>

@code
{
    public ReadyUpComponent ReadyUpSystem { get; set; }

    int RequiredPlayers => ReadyUpSystem.MinPlayers - ReadyUpSystem.ReadyCount;

    private Color[] ControllerColors = new[]
    {
        Color.Red,
        Color.Green,
        Color.Blue,
        Color.White
    };

    string GetControllerColor( int i ) => ControllerColors[i].Hex;

    protected override int BuildHash()
    {
        return System.HashCode.Combine( ReadyUpSystem.ReadyPlayers.Count, ReadyUpSystem.ControllerCount );
    }

    public override void Tick()
    {
        for ( int i = 0; i < ReadyUpSystem.ControllerCount; i++ )
        {
            // Is anyone hitting the button?
            using ( Input.PlayerScope( i ) )
            {
                if ( Input.Down( "View" ) )
                {
                    var gameManager = Game.ActiveScene.GetAllComponents<GameStateManager>().FirstOrDefault();
                    gameManager.SetGameState( GameStateManager.GameState.Countdown );
                }
            }
        }
    }
}
